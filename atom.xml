<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苏车式</title>
  <subtitle>请让我改完这BUG🤣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-30T06:23:59.270Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王昌隆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[原创]天命无我-先天神魔</title>
    <link href="http://yoursite.com/2016/09/30/%E5%8E%9F%E5%88%9B-%E5%A4%A9%E5%91%BD%E6%97%A0%E6%88%91-%E5%85%88%E5%A4%A9%E7%A5%9E%E9%AD%94/"/>
    <id>http://yoursite.com/2016/09/30/原创-天命无我-先天神魔/</id>
    <published>2016-09-30T06:16:47.000Z</published>
    <updated>2016-09-30T06:23:59.270Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[原创]天命无我-万物之始</title>
    <link href="http://yoursite.com/2016/09/30/%E5%8E%9F%E5%88%9B-%E5%A4%A9%E5%91%BD%E6%97%A0%E6%88%91-%E4%B8%87%E7%89%A9%E4%B9%8B%E5%A7%8B/"/>
    <id>http://yoursite.com/2016/09/30/原创-天命无我-万物之始/</id>
    <published>2016-09-29T16:16:38.000Z</published>
    <updated>2016-09-30T13:01:08.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="万物之始"><a href="#万物之始" class="headerlink" title="万物之始"></a>万物之始</h2><hr>
<p>虚无无极，无形无象。<br>化生一焏是为浑沌。<br>一焏凝形是为元气。元气之间相互吸引、排斥。平衡，使得浑沌静止。<br>元气聚，化成奇点。<br>这一瞬，浑沌的平衡被打破，混乱的能量开始由奇点向外扩散。混乱肆虐，元气湮灭，空间诞生。同时一种排斥的力量伴生，它充斥着空间的每一个角落，随着空间一起壮大，后世的人们称它为时间。<br>宇宙在这一瞬诞生。<br>元气湮灭，三分精气神，精为物，气为质，神为规则。规则由元气而生，万万千千。<br>有一规则名为融合，继承了元气吸引的能力，聚集精气神，许久之后一个微弱的意识诞生了。无序的融合，在意识的指引下变成了有序的行为。融合的意识逐渐强大，终于这个意识有了思考的能力。一个奇妙的波动扩散开来，宇宙中所有规则悸动化形而生。<br>终于这个波动到达了宇宙边缘，元气停止湮灭。<br>边缘地带，虚无、混沌、元气相互搅动。</p>
<p>参考:<a href="http://baike.baidu.com/view/2192547.htm" target="_blank" rel="external">先天五太</a>分别为：太易、太初、太始，太素、太极</p>
]]></content>
    
    <summary type="html">
    
      对于万物来说，都只配当分母。
    
    </summary>
    
      <category term="天命无我" scheme="http://yoursite.com/categories/%E5%A4%A9%E5%91%BD%E6%97%A0%E6%88%91/"/>
    
    
      <category term="原创" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="小说" scheme="http://yoursite.com/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="天命无我" scheme="http://yoursite.com/tags/%E5%A4%A9%E5%91%BD%E6%97%A0%E6%88%91/"/>
    
  </entry>
  
  <entry>
    <title>微信2.5</title>
    <link href="http://yoursite.com/2016/09/29/%E5%BE%AE%E4%BF%A12-5/"/>
    <id>http://yoursite.com/2016/09/29/微信2-5/</id>
    <published>2016-09-29T09:06:10.000Z</published>
    <updated>2016-09-29T16:03:14.787Z</updated>
    
    <content type="html"><![CDATA[<p>创作中。。。</p>
]]></content>
    
    <summary type="html">
    
      市民卡微信系列是一个迭代开发项目
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="framework7" scheme="http://yoursite.com/tags/framework7/"/>
    
      <category term="工作" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>javascript实现ping</title>
    <link href="http://yoursite.com/2016/09/29/javascript%E5%AE%9E%E7%8E%B0ping/"/>
    <id>http://yoursite.com/2016/09/29/javascript实现ping/</id>
    <published>2016-09-29T07:25:04.000Z</published>
    <updated>2016-09-30T12:28:15.459Z</updated>
    
    <content type="html"><![CDATA[<p>ping功能代码实现<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ping</span>(<span class="params">ip</span>) </span>&#123;</div><div class="line">  </div><div class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">    <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">var</span> isCloseWifi = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">var</span> hasFinish = <span class="literal">false</span>;</div><div class="line">  </div><div class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( !hasFinish ) &#123;</div><div class="line">            flag = <span class="literal">true</span>;</div><div class="line">            hasFinish = <span class="literal">true</span>;</div><div class="line">            img.src = <span class="string">'X:\\'</span>;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Ping '</span> + ip + <span class="string">' success. '</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">  </div><div class="line">    img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( !hasFinish ) &#123;</div><div class="line">            <span class="keyword">if</span> ( !isCloseWifi ) &#123;</div><div class="line">                flag = <span class="literal">true</span>;</div><div class="line">                img.src = <span class="string">'X:\\'</span>;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'Ping '</span> + ip + <span class="string">' success. '</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'network is not working!'</span>);</div><div class="line">            &#125;</div><div class="line">            hasFinish = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">  </div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        isCloseWifi = <span class="literal">false</span>;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'network is working, start ping...'</span>);</div><div class="line">    &#125;,<span class="number">2</span>);</div><div class="line">  </div><div class="line">    img.src = <span class="string">'http://'</span> + ip + <span class="string">'/'</span> + start;</div><div class="line">    <span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( !flag ) &#123;</div><div class="line">            hasFinish = <span class="literal">true</span>;</div><div class="line">            img.src = <span class="string">'X://'</span>;</div><div class="line">            flag = <span class="literal">false</span> ;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Ping '</span> + ip + <span class="string">' fail. '</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="number">1500</span>);</div><div class="line">&#125;</div><div class="line">  </div><div class="line">ping(<span class="string">'https://wcl1237.github.io/'</span>);</div><div class="line"><span class="comment">//该代码片段来自于: http://www.sharejs.com/codes/javascript/8370</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      黑科技力量大
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="ping" scheme="http://yoursite.com/tags/ping/"/>
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="黑科技" scheme="http://yoursite.com/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>浅谈onerror</title>
    <link href="http://yoursite.com/2016/09/29/%E6%B5%85%E8%B0%88onerror/"/>
    <id>http://yoursite.com/2016/09/29/浅谈onerror/</id>
    <published>2016-09-29T02:26:51.000Z</published>
    <updated>2016-09-30T12:28:19.222Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<p>onerror 事件会在文档或图像加载过程中发生错误时被触发，或者页面中出现脚本错误，也会产生 onerror 事件。<br>如果需要利用 onerror 事件，就必须创建一个处理错误的函数。你可以把这个函数叫作 onerror 事件处理器 (onerror event handler)。这个事件处理器使用三个参数来调用：msg（错误消息）、url（发生错误的页面的 url）、line（发生错误的代码行）。同样，你也可以不使用他们。<br><a id="more"></a></p>
<h2 id="监听脚本错误"><a href="#监听脚本错误" class="headerlink" title="监听脚本错误"></a>监听脚本错误</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">	&lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">		onerror=handleErr</div><div class="line">		var txt=<span class="string">""</span></div><div class="line">		<span class="keyword">function</span> handleErr(msg,url,l)</div><div class="line">		&#123;</div><div class="line">			txt=<span class="string">"There was an error on this page.\n\n"</span></div><div class="line">			txt+=<span class="string">"Error: "</span> + msg + <span class="string">"\n"</span></div><div class="line">			txt+=<span class="string">"URL: "</span> + url + <span class="string">"\n"</span></div><div class="line">			txt+=<span class="string">"Line: "</span> + l + <span class="string">"\n\n"</span></div><div class="line">			txt+=<span class="string">"Click OK to continue.\n\n"</span></div><div class="line">			alert(txt)</div><div class="line">			<span class="built_in">return</span> <span class="literal">true</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">function</span> <span class="function"><span class="title">message</span></span>()</div><div class="line">		&#123;</div><div class="line">			alertdddlert(<span class="string">"Welcome guest!"</span>)</div><div class="line">		&#125;</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"View message"</span> onclick=<span class="string">"message()"</span> /&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="监听资源加载"><a href="#监听资源加载" class="headerlink" title="监听资源加载"></a>监听资源加载</h2><p>如果装载图像时发生了错误，则显示一个对话框：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="string">"image.gif"</span> onerror=<span class="string">"alert('The image could not be loaded.')"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>支持该事件的 HTML 标签：</p>
<blockquote>
<p>&lt;img&gt;,&lt;script&gt; , &lt;link&gt; 等</p>
</blockquote>
<h2 id="使用onerror加载图片"><a href="#使用onerror加载图片" class="headerlink" title="使用onerror加载图片"></a>使用onerror加载图片</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">	&lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;img src=<span class="string">"1.jpg"</span> id=<span class="string">'image'</span> onerror=<span class="string">"setimg()"</span> alt=<span class="string">"pic"</span> style=<span class="string">'background-image: url(2.jpg)'</span> /&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">	<span class="keyword">function</span> <span class="function"><span class="title">setimg</span></span>()&#123;</div><div class="line">		var d_image = document.getElementById(<span class="string">'image'</span>);</div><div class="line">		d_image .setAttribute(<span class="string">'src'</span>,<span class="string">'3.jpg'</span>);</div><div class="line">		d_image .onerror = <span class="string">''</span>;</div><div class="line">	&#125;</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>利用3张图片，保证在加载第三方资源时不会因为无资源出现UI问题;同样也可以利用onerror监听js、css文件加载，实现二次请求。以及监听jsonp失败。</p>
<h2 id="参考内容："><a href="#参考内容：" class="headerlink" title="参考内容："></a>参考内容：</h2><p><a href="http://www.w3school.com.cn/jsref/event_onerror.asp" target="_blank" rel="external">W3C_onerror事件</a></p>
]]></content>
    
    <summary type="html">
    
      onerror用于错误处理，同时也可监听资源加载
    
    </summary>
    
      <category term="心得" scheme="http://yoursite.com/categories/%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="onerror" scheme="http://yoursite.com/tags/onerror/"/>
    
  </entry>
  
  <entry>
    <title>form-ajax-jsonp三部曲之三</title>
    <link href="http://yoursite.com/2016/09/28/form-ajax-jsonp%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%B8%89/"/>
    <id>http://yoursite.com/2016/09/28/form-ajax-jsonp三部曲之三/</id>
    <published>2016-09-28T15:26:00.000Z</published>
    <updated>2016-09-30T12:28:08.911Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<p>JSONP(JSON with Padding)是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。由于同源策略，一般来说位于 server1.example.com 的网页无法与不是 server1.example.com的服务器沟通，而 HTML 的&lt;script&gt;元素是一个例外。利用 &lt;script&gt;元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。<br><a id="more"></a></p>
<h2 id="Jsonp原理"><a href="#Jsonp原理" class="headerlink" title="Jsonp原理"></a>Jsonp原理</h2><p>在客户端定义一个callbackFunction, 然后把callbackFunction的名字传给服务器。</p>
<p>服务器先生成 json 数据。然后以 javascript 语法的方式，生成一个function , function 名字就是传递上来的参数 jsonp的值.</p>
<p>最后将 json 数据直接以入参的方式，放置到 function 中，这样就生成了一段 js 语法的文档，返回给客户端。</p>
<p>客户端浏览器，解析script标签，并执行返回的 javascript 文档，此时数据作为参数，传入到了客户端预先定义好的 callbackFunction 函数里.（动态执行回调函数）</p>
<h2 id="服务器端对JSONP支持"><a href="#服务器端对JSONP支持" class="headerlink" title="服务器端对JSONP支持"></a>服务器端对JSONP支持</h2><p>请求： <a href="http://example.com/servlet?jsonp=callbackFunction。" target="_blank" rel="external">http://example.com/servlet?jsonp=callbackFunction。</a><br>期望数据：[“param1”,”param2”]<br>前段通过&lt;script&gt;加载文档并调用。实现callbackFunction函数调用</p>
<p>Java:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">return</span> request.getParameter(<span class="string">"callbackFunction"</span>)+<span class="string">"("</span>+JsonString+<span class="string">")"</span>;</div></pre></td></tr></table></figure></p>
<p>返回内容像：callbackFunction([“param1”,”param2”])</p>
<h2 id="客户端实现跨域请求"><a href="#客户端实现跨域请求" class="headerlink" title="客户端实现跨域请求"></a>客户端实现跨域请求</h2><p>在客户端调用提供JSONP支持的URL Service，获取JSONP格式数据。</p>
<h3 id="创建script标签"><a href="#创建script标签" class="headerlink" title="创建script标签"></a>创建script标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var head= document.getElementsByTagName(<span class="string">'head'</span>)[0]; </div><div class="line">var script= document.createElement(<span class="string">'script'</span>); </div><div class="line">script.type= <span class="string">'text/javascript'</span>; </div><div class="line">script.src= <span class="string">'http://example.com/servlet?jsonp=callbackFunction'</span>; </div><div class="line">head.appendChild(script);</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">	...</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"http://example.com/servlet?jsonp=callbackFunction"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure></p>
<h3 id="客户端实现-callbackFunction-函数-全局"><a href="#客户端实现-callbackFunction-函数-全局" class="headerlink" title="客户端实现 callbackFunction 函数(全局)"></a>客户端实现 callbackFunction 函数(全局)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> callbackFunction(result) &#123;  </div><div class="line">    <span class="keyword">for</span>(var i <span class="keyword">in</span> result) &#123;  </div><div class="line">        alert(i+<span class="string">":"</span>+result[i]); </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="监听jsonp"><a href="#监听jsonp" class="headerlink" title="监听jsonp"></a>监听jsonp</h2><p>Jsonp本质上就是一个异步的get请求，但是他跟ajax理论上毫无关联。<br>创建的script标签加载过程中同样拥有onreadystatechange事件与onload事件，同样也拥有onerror事件。我们可以通过这些来观察jsonp回调。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	var head= document.getElementsByTagName(<span class="string">'head'</span>)[0]; </div><div class="line">	var script= document.createElement(<span class="string">'script'</span>); </div><div class="line">	script.type= <span class="string">'text/javascript'</span>; </div><div class="line">	script.onload = script.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123; </div><div class="line">		<span class="keyword">if</span> (!this.readyState || this.readyState === <span class="string">"loaded"</span> || this.readyState === <span class="string">"complete"</span> ) &#123; </div><div class="line">			alert(<span class="string">'加载成功'</span>)</div><div class="line">			script.onload = script.onreadystatechange = null; </div><div class="line">		&#125; </div><div class="line">	&#125;; </div><div class="line">	script.onerror = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">		alert(<span class="string">'加载失败'</span>)</div><div class="line">	&#125;</div><div class="line">	script.src= <span class="string">'jsonp.js'</span>; </div><div class="line">	head.appendChild(script); </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>除此之外，考虑到安全问题，我们可以通过使用正则表达式检查 JSON 字符。</p>
<p>js代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var my_JSON_object = !(/[^,:&#123;&#125;\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(text.replace(/<span class="string">"(\\.|[^"</span>\\])*<span class="string">"/g, ' '))) &amp;&amp; eval('(' + text + ')');</span></div></pre></td></tr></table></figure></p>
<p>更多相关json内容会在以后与大家分享。至此form-ajax-jsonp三部曲暂时告一段落。希望各位多指点，修正。</p>
<h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="http://baike.baidu.com/link?url=7LFR-mfdqdfKP27vWNn3Mykr_tTaicF9gIFSbTiSDN8KAdnH5Y0yMsRb9aCAa1W3SEMoW7JuzrqNMlYLcuPDDq" target="_blank" rel="external">百度百科_jsonp</a><br><a href="http://justcoding.iteye.com/blog/1366102/" target="_blank" rel="external">Just Code_天梯梦</a></p>
]]></content>
    
    <summary type="html">
    
      数据交互与dom操作并列前端两大基石
    
    </summary>
    
      <category term="心得" scheme="http://yoursite.com/categories/%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="jsonp" scheme="http://yoursite.com/tags/jsonp/"/>
    
      <category term="数据交互" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>form-ajax-jsonp三部曲之二</title>
    <link href="http://yoursite.com/2016/09/28/form-ajax-jsonp%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%BA%8C/"/>
    <id>http://yoursite.com/2016/09/28/form-ajax-jsonp三部曲之二/</id>
    <published>2016-09-28T10:19:09.000Z</published>
    <updated>2016-09-30T12:30:39.220Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。<br>AJAX = 异步 JavaScript和XML（标准通用标记语言的子集）。<br>AJAX 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br><a id="more"></a></p>
<h2 id="XMLHttpRequest-是-AJAX-的基础"><a href="#XMLHttpRequest-是-AJAX-的基础" class="headerlink" title="XMLHttpRequest 是 AJAX 的基础"></a>XMLHttpRequest 是 AJAX 的基础</h2><p>注：IE5 和 IE6 使用 ActiveXObject。</p>
<h2 id="创建-XMLHttpRequest-对象"><a href="#创建-XMLHttpRequest-对象" class="headerlink" title="创建 XMLHttpRequest 对象"></a>创建 XMLHttpRequest 对象</h2><p>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。<br>创建 XMLHttpRequest 对象的语法：</p>
<blockquote>
<p>variable=new XMLHttpRequest();</p>
</blockquote>
<p>Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</p>
<blockquote>
<p>variable=new ActiveXObject(“Microsoft.XMLHTTP”);</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//创建</div><div class="line">var xmlhttp;</div><div class="line"><span class="keyword">if</span> (window.XMLHttpRequest)</div><div class="line">  &#123;// code <span class="keyword">for</span> IE7+, Firefox, Chrome, Opera, Safari</div><div class="line">  xmlhttp=new XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;// code <span class="keyword">for</span> IE6, IE5</div><div class="line">  xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="XMLHttpRequest对象用于和服务器交换数据"><a href="#XMLHttpRequest对象用于和服务器交换数据" class="headerlink" title="XMLHttpRequest对象用于和服务器交换数据"></a>XMLHttpRequest对象用于和服务器交换数据</h2><h3 id="XMLHttpRequest对象的方法"><a href="#XMLHttpRequest对象的方法" class="headerlink" title="XMLHttpRequest对象的方法"></a>XMLHttpRequest对象的方法</h3><p>open(method,url,async)</p>
<blockquote>
<p>method：请求的类型；GET 或 POST<br>url：文件在服务器上的位置<br>async：true（异步）或 false（同步）</p>
</blockquote>
<p>POST请求 send(string)<br>GET请求 send()</p>
<p>setRequestHeader(header,value)</p>
<blockquote>
<p>header: 规定头的名称<br>value: 规定头的值</p>
</blockquote>
<h3 id="XMLHttpRequest对象的属性"><a href="#XMLHttpRequest对象的属性" class="headerlink" title="XMLHttpRequest对象的属性"></a>XMLHttpRequest对象的属性</h3><p>onreadystatechange  当 readyState 属性改变时，就会触发该事件</p>
<p>readyState     存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。</p>
<blockquote>
<p>0: 请求未初始化<br>1: 服务器连接已建立<br>2: 请求已接收<br>3: 请求处理中<br>4: 请求已完成，且响应已就绪</p>
</blockquote>
<p>status    </p>
<blockquote>
<p>200: “OK”<br>300~307: 重定向类<br>40<em>: 请求错误<br>50</em>: 服务器错误</p>
</blockquote>
<h2 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h2><blockquote>
<p>responseText    获得字符串形式的响应数据。<br>responseXML    获得 XML 形式的响应数据。</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//创建XMLHttpRequest对象</div><div class="line">var xmlHttp = new XMLHttpRequest();</div><div class="line"></div><div class="line">//配置XMLHttpRequest对象</div><div class="line">xmlHttp.open(<span class="string">"get"</span>, <span class="string">"url?key=value"</span>);</div><div class="line"></div><div class="line">//设置回调函数</div><div class="line">xmlHttp.onreadystatechange = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="keyword">if</span> (xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status == 200) &#123;</div><div class="line">        var result= xmlHttp.responseText;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//发送请求</div><div class="line">xmlHttp.send(null);</div></pre></td></tr></table></figure>
<h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//创建XMLHttpRequest对象</div><div class="line">var xmlHttp = new XMLHttpRequest();</div><div class="line"></div><div class="line">//配置XMLHttpRequest对象</div><div class="line">xmlHttp.open(<span class="string">"post"</span>, <span class="string">"url"</span>, data);</div><div class="line"></div><div class="line">//设置回调函数</div><div class="line">xmlHttp.onreadystatechange = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="keyword">if</span> (xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status == 200) &#123;</div><div class="line">        var result= xmlHttp.responseText;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//发送请求</div><div class="line">xmlHttp.send(data);</div></pre></td></tr></table></figure>
<h2 id="ajax简单封装实例"><a href="#ajax简单封装实例" class="headerlink" title="ajax简单封装实例"></a>ajax简单封装实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	<span class="keyword">function</span> ajax(config) &#123;</div><div class="line"></div><div class="line">	  	var xhr = null;</div><div class="line">	  	try&#123;</div><div class="line">			xhr = new XMLHttpRequest();</div><div class="line">	  	&#125;catch(e)&#123;</div><div class="line">			try&#123;</div><div class="line">				xhr = new ActiveXObject(<span class="string">'MSXML2.XMLHttp'</span>);</div><div class="line">			&#125;catch(e)&#123;</div><div class="line">				xhr = new ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		var date = new Date();</div><div class="line">	  	config.url = config.url + <span class="string">'?timestamp='</span> + date.getTime();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (config.method === <span class="string">'get'</span>) &#123;</div><div class="line">			var arr = [];</div><div class="line">			<span class="keyword">for</span> (var i <span class="keyword">in</span> config.data) &#123;</div><div class="line">			    arr.push(encodeURIComponent(i) + <span class="string">'='</span> + encodeURIComponent(config.data[i]));</div><div class="line">		  	&#125;</div><div class="line">		  	config.data = arr.join(<span class="string">'&amp;'</span>)</div><div class="line">		    config.url += config.data; </div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (config.async === <span class="literal">true</span>) &#123; </div><div class="line">		    xhr.onreadystatechange = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">		      	<span class="keyword">if</span> (xhr.readyState == 4) &#123;</div><div class="line">		        	callback();</div><div class="line">		      	&#125;</div><div class="line">		    &#125;;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	  	xhr.open(config.method, config.url, config.async);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (config.method === <span class="string">'post'</span>) &#123;</div><div class="line">		    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>);</div><div class="line">		    xhr.send(JSON.stringify(config.data));</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">		    xhr.send(null);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (config.async === <span class="literal">false</span>) &#123;</div><div class="line">		    callback();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">function</span> <span class="function"><span class="title">callback</span></span>() &#123;</div><div class="line">		    <span class="keyword">if</span> (xhr.status == 200) &#123;</div><div class="line">		      	config.success(xhr.responseText);</div><div class="line">		    &#125; <span class="keyword">else</span> &#123;</div><div class="line">		      	alert(<span class="string">'获取数据错误！错误代号：'</span> + xhr.status + <span class="string">'，错误信息：'</span> + xhr.statusText);</div><div class="line">		    &#125;	</div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="http://www.w3school.com.cn/ajax/index.asp" target="_blank" rel="external">W3C_ajax</a><br><a href="http://www.tuicool.com/articles/n26F3yb" target="_blank" rel="external">推酷</a></p>
]]></content>
    
    <summary type="html">
    
      数据交互与dom操作并列前端两大基石
    
    </summary>
    
      <category term="心得" scheme="http://yoursite.com/categories/%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="数据交互" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>form-ajax-jsonp三部曲之一</title>
    <link href="http://yoursite.com/2016/09/28/form-ajax-jsonp%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%B8%80/"/>
    <id>http://yoursite.com/2016/09/28/form-ajax-jsonp三部曲之一/</id>
    <published>2016-09-28T07:29:14.000Z</published>
    <updated>2016-09-30T12:30:53.739Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<p>&lt;form&gt; 标签用于为用户输入创建 HTML 表单。<br>表单能够包含 input 元素，比如文本字段、复选框、单选框、提交按钮等等。<br>表单还可以包含 menus、textarea、fieldset、legend 和 label 元素。<br>表单用于向服务器传输数据。<br><a id="more"></a></p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"url"</span> enctype=<span class="string">"multipart/form-data"</span> name=<span class="string">"form1"</span> target=<span class="string">"_blank"</span> method=<span class="string">"get"</span> &gt;</div><div class="line">  &lt;p&gt;First name: &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"fname"</span> /&gt;&lt;/p&gt;</div><div class="line">  &lt;p&gt;Last name: &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"lname"</span> /&gt;&lt;/p&gt;</div><div class="line">  &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"Submit"</span> /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h2 id="form元素属性"><a href="#form元素属性" class="headerlink" title="form元素属性"></a>form元素属性</h2><table class="table table-bordered table-striped table-condensed"><tr><th>属性</th><th>值</th><th>描述</th></tr><tr><td>accept-charset</td><td>charset_list</td><td>规定服务器可处理的表单数据字符集。</td></tr><tr><td>action</td><td>URL</td><td>规定当提交表单时向何处发送表单数据。</td></tr><tr><td rowspan="2">autocomplete</td><td>on</td><td rowspan="2">规定是否启用表单的自动完成功能。</td></tr><tr><td>off</td></tr><tr><td rowspan="2">method</td><td>get</td><td rowspan="2">规定用于发送 form-data 的 HTTP 方法。</td></tr><tr><td>post</td></tr><tr><td>name</td><td>form_name</td><td>规定表单的名称。</td></tr><tr><td rowspan="5">target</td><td>_blank</td><td rowspan="5">规定在何处打开 action URL。</td></tr><tr><td>_self</td></tr><tr><td>_parent</td></tr><tr><td>_top</td></tr><tr><td>framename</td></tr><tr><td rowspan="3">enctype</td><td>application/x-www-form-urlencoded</td><td rowspan="3"></td></tr><tr><td>multipart/form-data</td></tr><tr><td>text/plain</td></tr></table>

<h2 id="Form-对象"><a href="#Form-对象" class="headerlink" title="Form 对象"></a>Form 对象</h2><p>Form 对象代表一个 HTML 表单。<br>在 HTML 文档中&lt;form&gt; 每出现一次，Form 对象就会被创建。</p>
<h2 id="Form-对象属性"><a href="#Form-对象属性" class="headerlink" title="Form 对象属性"></a>Form 对象属性</h2><table class="table table-bordered table-striped table-condensed"><tr><th>属性</th><th>描述</th></tr><tr><td>acceptCharset</td><td>服务器可接受的字符集。</td></tr><tr><td>action</td><td>设置或返回表单的 action 属性。</td></tr><tr><td>enctype</td><td>设置或返回表单用来编码内容的 MIME 类型。</td></tr><tr><td>id</td><td>设置或返回表单的 id。</td></tr><tr><td>length</td><td>返回表单中的元素数目。</td></tr><tr><td>method</td><td>设置或返回将数据发送到服务器的 HTTP 方法。</td></tr><tr><td>name</td><td>设置或返回表单的名称。</td></tr><tr><td>target </td><td>设置或返回表单提交结果的 Frame 或 Window 名。</td></tr></table>

<h2 id="Form-对象方法-句柄"><a href="#Form-对象方法-句柄" class="headerlink" title="Form 对象方法/句柄"></a>Form 对象方法/句柄</h2><p>submit()    提交表单。<br>onsubmit    在提交表单之前调用。</p>
<h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="http://www.w3school.com.cn/tags/tag_form.asp" target="_blank" rel="external">W3C_form标签</a></p>
]]></content>
    
    <summary type="html">
    
      数据交互与dom操作并列前端两大基石
    
    </summary>
    
      <category term="心得" scheme="http://yoursite.com/categories/%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="数据交互" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
      <category term="form" scheme="http://yoursite.com/tags/form/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Wifi portal</title>
    <link href="http://yoursite.com/2016/09/28/Wifi-portal/"/>
    <id>http://yoursite.com/2016/09/28/Wifi-portal/</id>
    <published>2016-09-28T03:05:04.000Z</published>
    <updated>2016-09-30T12:31:42.440Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<p>工作以来第一个项目，虽然说不上手足无措，但是也同样有点力不从心。代码写了改，改了写，总感觉不好。纠结了4个小时，终于把相关的9个网页写完。然后…第二天，产品改了需求，页面被精简到4个。好吧，拿回原稿修改了一下啊，UI部分总算出活了。接下来与大家分享一下，开发中遇到的问题。<br><a id="more"></a></p>
<h2 id="接口调试"><a href="#接口调试" class="headerlink" title="接口调试"></a>接口调试</h2><p>拿到接口文档就开始写后台交互。自己封装好一个ajax，交互逻辑写好，开始调试接口。<br>然后问题出现了，后端解析不了我传过去的数据。后来查出我传过去的不是严格格式的json。然后花了一个小时时间拼接了这个字符串：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'&#123;\"mobile\":\"'</span>+tel+<span class="string">'\",\"pwd\":\"'</span>+code+<span class="string">'\",\"funCode\":\"8003\"&#125;'</span></div></pre></td></tr></table></figure>
<h2 id="ajax是异步的"><a href="#ajax是异步的" class="headerlink" title="ajax是异步的"></a>ajax是异步的</h2><p>开发是小，bug是大。ajax的成功回调函数是需要后端返回数据后才能执行的。也就是说想要使用response需要在回调函数中，写在ajax后面来调用的话，一般都会报undefind。</p>
<h2 id="实例化swiper时，需要Dom加载完成"><a href="#实例化swiper时，需要Dom加载完成" class="headerlink" title="实例化swiper时，需要Dom加载完成"></a>实例化swiper时，需要Dom加载完成</h2><p>一般的说，我们都习惯在window onload后去new swiper。但是如果在此之后去修改swiper 图片数量的话，就会造成指示器跟图片对不上号的现象。<br>这是因为new swiper的过程中swper.js对DOM进行了一系列操作，指示器是依据当时图片数量生成的。所以实例化swiper时，需要先做图片修改并等待Dom加载完成。</p>
<h2 id="浏览器与AP的交互"><a href="#浏览器与AP的交互" class="headerlink" title="浏览器与AP的交互"></a>浏览器与<a href="http://baike.baidu.com/link?url=IorPqk2qK5pfIXXP6Eq7IUvHxKju-6dQPwrRpVdX_4q4Gc-9XKa5_p5kOFz046Bzbt-XdhVSqTeDraUg2UL5oa" target="_blank" rel="external">AP</a>的交互</h2><p>当浏览器通过wifi首次连接到AP时，AP会获取到手机mac信息，进行信息校验。若为新用户AP会拦截网络请求并将手机mac信息协带AP部分信息重定向到server。用户需要在页面进行注册认证。成功后server会通知AC(AP后台云服务器)，AC下发指令到AP放行该mac。</p>
<p>注：手机mac信息在链接wifi时就会表现出来，属于公开信息。</p>
<h2 id="Wifi-portal"><a href="#Wifi-portal" class="headerlink" title="Wifi portal"></a>Wifi portal</h2><p>Wifi portal实际是指当手机器连接wifi后，手机自动打开的portal页面。该页面属于浏览器的一部分，一般内核为手机自带浏览器。但是该浏览器在暴露过程中，无法访问手机内任何信息，包括但不限于cookie、localStorage、sessionStorage。</p>
<h2 id="适配性"><a href="#适配性" class="headerlink" title="适配性"></a>适配性</h2><p>移动端或多或少会出现点适配性问题，相较于PC端ie6之类有过之而无不及。<br>①wifi portal在ios上会出现偶尔无法自动弹出的情况，原因是由于ios在打开portal页面之前会访问本身苹果的一个服务器，得到允许后才会打开。这个过程容易导致无法接受AP重定向信息。<br>②低端安卓手机，页面不会随手机键盘上移。解决办法在打开页面时增加页面长度。<br>③在UC浏览器上有个过滤广告设置的选项，开启该功能时，如果页面中出现ad等词汇会导致资源无法加载。</p>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>后来为了兼容PC端，我使用了framework7对程序进行了重写。有关framework7和SPA会在以后的文章中跟大家提及。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var REG_mobile = /^0?[1][34578][0-9]&#123;9&#125;$/;</div><div class="line">var REG_password = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,16&#125;$/;/*6-16位数字字母组合*/</div><div class="line">var REG_code = /^[0-9]&#123;6&#125;$/;</div></pre></td></tr></table></figure>
<h3 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h3><h4 id="js-基于framework7"><a href="#js-基于framework7" class="headerlink" title="js(基于framework7)"></a>js(基于framework7)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">window.showTips = <span class="keyword">function</span>(content,t) &#123;</div><div class="line">   var p = $$(<span class="string">'&lt;p class="showTips zoomInDown"&gt;&lt;span&gt;'</span>+content+<span class="string">'&lt;/span&gt;&lt;/p&gt;'</span>);</div><div class="line">   <span class="keyword">if</span>($$(<span class="string">'.showTips'</span>).length&gt;0)<span class="built_in">return</span>;</div><div class="line">   $$(<span class="string">'body'</span>).append(p);</div><div class="line">   <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	  p.addClass(<span class="string">'hide'</span>).transitionEnd(<span class="function"><span class="title">function</span></span>()&#123;p.remove()&#125;);//优化动画，平滑过渡</div><div class="line">   &#125;,t||2000)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">.zoomInDown&#123;</div><div class="line">-webkit-animation: zoomInDown .3s ease-in-out;</div><div class="line">&#125;</div><div class="line">@-webkit-keyframes zoomInDown&#123;0%&#123;opacity:0;-webkit-transform:scale3d(.1,.1,.1) translate3d(0,-1000px,0);transform:scale3d(.1,.1,.1) translate3d(0,-1000px,0);-webkit-animation-timing-function:cubic-bezier(.55,.055,.675,.19);animation-timing-function:cubic-bezier(.55,.055,.675,.19)&#125;</div><div class="line">60%&#123;opacity:1;-webkit-transform:scale3d(.475,.475,.475) translate3d(0,60px,0);transform:scale3d(.475,.475,.475) translate3d(0,60px,0);-webkit-animation-timing-function:cubic-bezier(.175,.885,.32,1);animation-timing-function:cubic-bezier(.175,.885,.32,1)&#125;</div><div class="line">&#125;</div><div class="line">@keyframes zoomInDown&#123;0%&#123;opacity:0;-webkit-transform:scale3d(.1,.1,.1) translate3d(0,-1000px,0);transform:scale3d(.1,.1,.1) translate3d(0,-1000px,0);-webkit-animation-timing-function:cubic-bezier(.55,.055,.675,.19);animation-timing-function:cubic-bezier(.55,.055,.675,.19)&#125;</div><div class="line">60%&#123;opacity:1;-webkit-transform:scale3d(.475,.475,.475) translate3d(0,60px,0);transform:scale3d(.475,.475,.475) translate3d(0,60px,0);-webkit-animation-timing-function:cubic-bezier(.175,.885,.32,1);animation-timing-function:cubic-bezier(.175,.885,.32,1)&#125;</div><div class="line">&#125; </div><div class="line">.showTips&#123;</div><div class="line">	position:fixed;</div><div class="line">	width:100%;</div><div class="line">	bottom:80px;</div><div class="line">	left:0;</div><div class="line">	text-align:center;</div><div class="line">	z-index:11000;</div><div class="line">	transition-duration:.3s</div><div class="line">&#125;</div><div class="line">.showTips span&#123;</div><div class="line">	background: rgba(0,0,0,.8);</div><div class="line">	border-radius: 4px;</div><div class="line">	color: <span class="comment">#fff;</span></div><div class="line">	padding: 17px 20px;</div><div class="line">	font-size: 1.2rem;</div><div class="line">	display: inline-block;</div><div class="line">	margin: 0 10px;</div><div class="line">&#125;</div><div class="line">.hide&#123;</div><div class="line">	opacity:0!important;</div><div class="line">	-webkit-transition-duration: 300ms;</div><div class="line">	transition-duration: 300ms;</div><div class="line">	-webkit-transform: translate3d(0, 0, 0) scale(0.8);</div><div class="line">	transform: translate3d(0, 0, 0) scale(0.8);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="countDown"><a href="#countDown" class="headerlink" title="countDown"></a>countDown</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">window.countDown=<span class="keyword">function</span>(obj,obj2)&#123;</div><div class="line">	var <span class="built_in">wait</span> = 60;</div><div class="line">	var timer;</div><div class="line">	clearInterval(timer)</div><div class="line">	obj.css(<span class="string">'opacity'</span>,<span class="string">'0.7'</span>)</div><div class="line">	timer=<span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">wait</span>==<span class="string">'0'</span>)&#123;</div><div class="line">			clearInterval(timer)</div><div class="line">			obj.text(<span class="string">'重新发送'</span>);</div><div class="line">			obj.css(<span class="string">'opacity'</span>,<span class="string">'1'</span>)</div><div class="line">			obj2.removeAttr(<span class="string">'readonly'</span>)</div><div class="line">			obj.css(<span class="string">'color'</span>,<span class="string">'#356be6'</span>)</div><div class="line">			<span class="built_in">wait</span>=<span class="string">''</span></div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			obj.css(<span class="string">'color'</span>,<span class="string">'#adadad'</span>)</div><div class="line">			obj2.attr(<span class="string">'readonly'</span>,<span class="string">'readonly'</span>)</div><div class="line">			obj.text(<span class="built_in">wait</span>+<span class="string">'s'</span>);</div><div class="line">			<span class="built_in">wait</span>--;</div><div class="line">		&#125;</div><div class="line">	&#125;,1000)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>无论怎样的开始都好过原地踌躇！成长在于跌倒爬起，犯错才是成长的催化剂！</p>
]]></content>
    
    <summary type="html">
    
      第一个项目
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="framework7" scheme="http://yoursite.com/tags/framework7/"/>
    
      <category term="工作" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo+tranquilpeak博客初长成(一)</title>
    <link href="http://yoursite.com/2016/09/27/hexo-tranquilpeak%E5%8D%9A%E5%AE%A2%E5%88%9D%E9%95%BF%E6%88%90(%E4%B8%80)/"/>
    <id>http://yoursite.com/2016/09/27/hexo-tranquilpeak博客初长成(一)/</id>
    <published>2016-09-27T15:16:15.000Z</published>
    <updated>2016-10-04T12:16:37.950Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<p><style>ol{list-style: none;}</style><br>欢迎来到<a href="https://wcl1237.github.io" target="_blank" rel="external">苏车式</a>! 经过两天的努力，我的第一个博客终于顺利上线。作为一个初出茅庐的新人,希望可以得到前辈的批评指正，也同样愿意帮助正在奋进的朋友一起提高。接下来便将这两天来的收获分享给大家。<br><a id="more"></a></p>
<h2 id="一、框架的选择"><a href="#一、框架的选择" class="headerlink" title="一、框架的选择"></a>一、框架的选择</h2><p>博客的框架有很多，比如github自带的jekyii，以及基于jekyii的octopress，基于php的wordpress，还有nodejs类的大部分应用性框架。考虑到后期扩展跟移植，我最后选择了<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>!</p>
<p>选择<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>的原因：第一、基于Node.js可以快速生成静态资源。第二、可以部署到github上。暂时免除域名，服务器等烦恼。第三、上手容易。从开发到配置到发布，5个命令轻松搞定。第四、撰写流畅。支持GitHub Flavored Markdown和所有Octopress的插件。第五、资源库还算强大。第六、扩展轻松。随着半年来的工作学习，渐渐明白从使用到改造到创造的过程是每个程序员必须经历的。</p>
<h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h3 id="安装Node与npm"><a href="#安装Node与npm" class="headerlink" title="安装Node与npm"></a>安装Node与npm</h3><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><h3 id="申请GitHub"><a href="#申请GitHub" class="headerlink" title="申请GitHub"></a>申请GitHub</h3><h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><p>全局安装Hexo.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h2 id="四、建站"><a href="#四、建站" class="headerlink" title="四、建站"></a>四、建站</h2><p>安装 Hexo完成后，</p>
<p>首先创建一个文件夹 folder。 </p>
<p>使用管理员权限打开命令行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> &lt;folder&gt;</div></pre></td></tr></table></figure>
<p>然后执行下列命令，Hexo将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ npm install</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
<h2 id="五、主题"><a href="#五、主题" class="headerlink" title="五、主题"></a>五、主题</h2><p>在<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>或者其他地方选择你喜欢的模版，比如tranquilpeak。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak.git</div></pre></td></tr></table></figure>
<p>或者直接Download ZIP</p>
<p>然后将文件放到\blog\themes下，然后找到主目录下_config.yml文件，修改如下设置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">theme: tranquilpeak</div><div class="line">post_assert_folder: <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>然后，运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>打开浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> ，你会发现it works,but 不像我们想象中那样(如果真的和你想的一样，请略过以下)。查看<a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="external">user documentation</a>,你会发现我们正在使用的是tranquilpeak (developers)，所以如果你只想使用该主题，请下载<a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/releases/download/v1.9.1/hexo-theme-tranquilpeak-built-for-production-1.9.1.zip" target="_blank" rel="external">version1.9.1 for production</a>，具体设置请参考<a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/docs/user.md" target="_blank" rel="external">文档</a></p>
<h2 id="六、配置文件"><a href="#六、配置文件" class="headerlink" title="六、配置文件"></a>六、配置文件</h2><p>配置文件主要分为两个，一个是主目录下的_config.yml文件，另一个是themes\tranquilpeak目录下的_config.yml文件。</p>
<p>主目录下的_config.yml文件主要负责定义hexo框架里以及deploy相关的配置。一般主题源文件中config变量下的属性值都是取至该文件下的配置信息。<br>主题目录下的_config.yml文件主要用来配置主题相关的。一般主题源文件中themes变量的属性值都是取至该文件下的配置信息。</p>
<p>详细的配置信息请自行摆渡。</p>
<h2 id="参考内容："><a href="#参考内容：" class="headerlink" title="参考内容："></a>参考内容：</h2><p><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/docs/user.md" target="_blank" rel="external">官方文档——User documentation</a></p>
]]></content>
    
    <summary type="html">
    
      博客第一弹
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="tranquilpeak" scheme="http://yoursite.com/tags/tranquilpeak/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
